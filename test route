# Provider
provider "aws" {
  region = "ca-central-1"
}

# Task 1: Create Hosted Zone
# resource "aws_route53_zone" "payment.dev.flyflair_zone" {
#   name    = "payment.dev.flyflair.com"
#   comment = "Public hosted zone for payment.dev.flyflair project"
# }

# Use the existing hosted zone ID
variable "hosted_zone_id" {
  type        = string
  description = "The ID of the existing hosted zone"
  default     = "Z06424622C954HY52QYPT" # Replace with the actual ID of the hosted zone
}


resource "aws_route53_record" "api_gateway" {
  zone_id = var.hosted_zone_id
  name    = "api.payment.dev.flyflair.com"
  type    = "A"
  alias {
    name                   = aws_api_gateway_domain_name.api_gateway_domain.cloudfront_domain_name
    zone_id                = aws_api_gateway_domain_name.api_gateway_domain.cloudfront_zone_id
    evaluate_target_health = true
  }
}


# Task 3: Set up Alias Records (for API Gateway and CloudFront)
resource "aws_api_gateway_domain_name" "api_gateway_domain" {
  domain_name     = "api.payment.dev.flyflair.com"
  certificate_arn = aws_acm_certificate_validation.api_gateway_cert.certificate_arn
}

resource "aws_acm_certificate" "api_gateway_cert" {
  domain_name       = "api.payment.dev.flyflair.com"
  validation_method = "DNS"

  lifecycle {
    create_before_destroy = true
  }
}

# Updated: Use for_each to create Route 53 DNS validation records for each domain validation option
resource "aws_route53_record" "api_gateway_validation" {
  for_each = { for dvo in aws_acm_certificate.api_gateway_cert.domain_validation_options : dvo.domain_name => dvo }

  zone_id = var.hosted_zone_id # Use the existing hosted zone ID
  name    = each.value.resource_record_name
  type    = each.value.resource_record_type
  ttl     = 60
  records = [each.value.resource_record_value]
}

resource "aws_acm_certificate_validation" "api_gateway_cert" {
  certificate_arn         = aws_acm_certificate.api_gateway_cert.arn
  validation_record_fqdns = [for record in aws_route53_record.api_gateway_validation : record.fqdn]
}


# Task 4: Establish Failover Routing Policies

resource "aws_route53_record" "api_gateway_failover_primary" {
  zone_id        = var.hosted_zone_id
  name           = "api.payment.dev.flyflair.com"
  type           = "A"
  set_identifier = "primary"
  alias {
    name                   = aws_api_gateway_domain_name.api_gateway_domain.cloudfront_domain_name
    zone_id                = aws_api_gateway_domain_name.api_gateway_domain.cloudfront_zone_id
    evaluate_target_health = true
  }
  failover_routing_policy {
    type = "PRIMARY"
  }
}

resource "aws_route53_zone" "secondary_zone" {
  name    = "backup-api-endpoint.payment.dev.flyflair.com"
  comment = "Secondary hosted zone for backup API endpoint"
}

resource "aws_route53_record" "api_gateway_failover_secondary" {
  zone_id        = aws_route53_zone.secondary_zone.zone_id
  name           = "backup-api-endpoint.payment.dev.flyflair.com"
  type           = "A"
  set_identifier = "secondary"
  alias {
    name                   = aws_api_gateway_domain_name.secondary_api_gateway_domain.cloudfront_domain_name
    zone_id                = aws_api_gateway_domain_name.secondary_api_gateway_domain.cloudfront_zone_id
    evaluate_target_health = true
  }
  failover_routing_policy {
    type = "SECONDARY"
  }
 
resource "aws_api_gateway_domain_name" "secondary_api_gateway_domain" {
  domain_name     = "backup-api-endpoint.payment.dev.flyflair.com"
  certificate_arn = aws_acm_certificate_validation.secondary_api_gateway_cert.certificate_arn
}


resource "aws_acm_certificate" "secondary_api_gateway_cert" {
  domain_name       = "backup-api-endpoint.payment.dev.flyflair.com"
  validation_method = "DNS"

  lifecycle {
    create_before_destroy = true
  }
}

# Updated: Use for_each to create Route 53 DNS validation records for each domain validation option
resource "aws_route53_record" "secondary_api_gateway_validation" {
  for_each = { for dvo in aws_acm_certificate.secondary_api_gateway_cert.domain_validation_options : dvo.domain_name => dvo }

  zone_id = aws_route53_zone.secondary_zone.zone_id
  name    = each.value.resource_record_name
  type    = each.value.resource_record_type
  ttl     = 60
  records = [each.value.resource_record_value]
}

resource "aws_acm_certificate_validation" "secondary_api_gateway_cert" {
  certificate_arn         = aws_acm_certificate.secondary_api_gateway_cert.arn
  validation_record_fqdns = [for record in aws_route53_record.secondary_api_gateway_validation : record.fqdn]
  #timeout                 = 5 * 60  # 5 minutes
}

# Task 5: Integrate with CloudFront (If applicable)
resource "aws_cloudfront_distribution" "ui_distribution" {
  origin {
    domain_name = aws_s3_bucket.ui_bucket.bucket_regional_domain_name
    origin_id   = "S3-ui-bucket"
 }

  enabled              = true
  default_root_object  = "index.html"

  viewer_certificate {
    cloudfront_default_certificate = true
  }

  restrictions {
       geo_restriction {
      restriction_type = "none"
    }
  }

  default_cache_behavior {
    allowed_methods        = ["GET", "HEAD"]
    cached_methods         = ["GET", "HEAD"]
    target_origin_id       = "S3-ui-bucket"
    viewer_protocol_policy = "redirect-to-https"
        forwarded_values {
      query_string = false
      cookies {
        forward = "none"
      }
    }
  }
}

# S3 bucket for CloudFront integration

resource "aws_s3_bucket" "ui_bucket" {
  bucket = "payment.dev.flyflair-ui-bucket"
}

#resource "aws_s3_bucket_acl" "ui_bucket_acl" {
 # bucket = aws_s3_bucket.ui_bucket.id
#  acl    = "private"
#}


resource "aws_s3_bucket_versioning" "ui_bucket_versioning" {
  bucket = aws_s3_bucket.ui_bucket.id
  versioning_configuration {
    status = "Enabled"
  }
}

# Task 6: Enable DNSSEC
#resource "aws_route53_hosted_zone_dnssec" "dnssec" {
 # hosted_zone_id = aws_route53_zone.payment.dev.flyflair_zone.zone_id
#}

#resource "aws_route53_key_signing_key" "ksk" {
  #hosted_zone_id                = aws_route53_zone.payment.dev.flyflair_zone.zone_id
  #name                          = "payment.dev.flyflair-key-signing-key"
  #status                        = "ACTIVE"
  #key_management_service_arn    = "arn:aws:kms:us-east-1:017820679929:key/19a3b419-5f75-45e3-9b01-3b5d8e7073b1"
#}

================================

╷
│ Error: creating API Gateway Domain Name (api.payment.dev.flyflair.com): operation error API Gateway: CreateDomainName, https response error StatusCode: 400, RequestID: 2e7f389e-acc3-4774-9cbc-51f5ce1a054f, BadRequestException: Invalid certificate ARN: arn:aws:acm:ca-central-1:017820679929:certificate/c3ede1ba-9ff4-4f72-8ffe-56f259324c2a. Certificate must be in 'us-east-1'.
│
│   with aws_api_gateway_domain_name.api_gateway_domain,
│   on infra-route53.tf line 33, in resource "aws_api_gateway_domain_name" "api_gateway_domain":
│   33: resource "aws_api_gateway_domain_name" "api_gateway_domain" {
│
╵
╷
│ Error: creating API Gateway Domain Name (backup-api-endpoint.payment.dev.flyflair.com): operation error API Gateway: CreateDomainName, https response error StatusCode: 400, RequestID: f9297e9b-b2d0-4ec5-b314-dfad917fb83b, BadRequestException: Invalid certificate ARN: arn:aws:acm:ca-central-1:017820679929:certificate/1dc4a7b0-c26e-42bc-aff8-8052ce4f6a55. Certificate must be in 'us-east-1'.
│
│   with aws_api_gateway_domain_name.secondary_api_gateway_domain,
│   on infra-route53.tf line 101, in resource "aws_api_gateway_domain_name" "secondary_api_gateway_domain":
│  101: resource "aws_api_gateway_domain_name" "secondary_api_gateway_domain" {

                                                                                                                                        
